" Use vim settings, rather then vi settings
" This must be first, because it changes other options as a side effect.
set nocompatible

" Plugins managed by vim-plug -- see https://github.com/junegunn/vim-plug
" for commands and more details.

" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for vim-plug plugins
" - Avoid using standard Vim directy names like 'plugin'
call plug#begin('~/.vim/vim-plug')

Plug 'MarcWeber/vim-addon-commenting'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'embear/vim-foldsearch'
Plug 'ervandew/supertab'
Plug 'itchyny/lightline.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'ludovicchabant/vim-lawrencium'
Plug 'rking/ag.vim'
Plug 'tpope/vim-dispatch'
Plug 'vim-python/python-syntax'
Plug 'wincent/command-t'

" Initialize plugin system
call plug#end()

" Preferences
set termguicolors
set background=light
colorscheme solarized8
"set t_Co=256            " iTerm2 supports 256 color mode
set ai                  " auto indenting
set si                  " smart indenting
syntax on               " syntax highlighting
filetype plugin on      " use the file type plugins
filetype indent on      " use the file type indent settings

set showmode            " always show what mode we're currently editing in

set tabstop=4           " a tab is four spaces
set softtabstop=4       " <BS> removes tab, even if its spaces
set shiftwidth=4        " number of spaces to use for autoindenting
set autoindent          " always set autoindent on
set copyindent          " copy the previous indentation on autoindenting

set showmatch           " set show matching parenthesis

set hlsearch            " highlight search terms
set incsearch           " show search matches as you type

set mouse=a             " enable using the mouse

set laststatus=2        " always display status line, even when there is only
                        "   one window

set nobackup            " do not keep backup files
set noswapfile          " do not write annoying swap files

set wildmenu            " make tab completion for files/buffers act like bash
set wildmode=list:full  " show a list when pressing tab and complete first full
                        "   match
set wildignore=*.swp,*.bak,*.pyc,*.class
set title               " change the terminal's title
set novisualbell        " don't beep
set noerrorbells        " don't beep

set path+=./**
set makeprg=build
set smartcase
set ff=unix
set expandtab
set number
set colorcolumn=80
hi ColorColumn ctermbg=0

""Format on save using Prettier
autocmd BufWrite Pre *.js,*.jsx,*.ts,*.tsx Neoformat
" Use formatprg when available
let g:neoformat_try_formatprg = 1

let g:ackprg = 'ag --nogroup --nocolor --column --vimgrep'
let g:lightline = {
  \     'active': {
  \         'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
  \         'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
  \     }
  \ }

let g:python_highlight_all = 1

" Custom mappings
nnoremap ,<space> :nohlsearch<CR>
nnoremap <F8> :checktime<CR>
map <F4> :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>

set relativenumber
nnoremap <F5> :set relativenumber!<CR>:set rnu?<CR>

" Tags

nnoremap <C-]> g<C-]>
vnoremap <C-]> g<C-]>
nnoremap g] g<C-]>
vnoremap g] g<C-]>

" use par for 'gq' formatting
set formatprg=par\ -w80

" __        ___     _ _
" \ \      / / |__ (_) |_ ___  ___ _ __   __ _  ___ ___
"  \ \ /\ / /| '_ \| | __/ _ \/ __| '_ \ / _` |/ __/ _ \
"   \ V  V / | | | | | ||  __/\__ \ |_) | (_| | (_|  __/
"    \_/\_/  |_| |_|_|\__\___||___/ .__/ \__,_|\___\___|
"                                 |_|
"  FIGLET: Whitespace
"

" highlight spurious whitespace before the linter does
highlight ExtraWhitespace ctermbg=lightgreen guibg=lightgreen
match ExtraWhitespace /\s\+$/

" Removes trailing spaces
function! TrimWhiteSpace()
    if exists('b:noStripTrailing')
        return
    endif
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction

nnoremap <silent> <Leader>rts :call TrimWhiteSpace()<CR>

autocmd FileWritePre    * :call TrimWhiteSpace()
autocmd FileAppendPre   * :call TrimWhiteSpace()
autocmd FilterWritePre  * :call TrimWhiteSpace()
autocmd BufWritePre     * :call TrimWhiteSpace()
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd FileType markdown let b:noStripTrailing=1

" Auto-select visual region on indent/dedent
vnoremap < <gv
vnoremap > >gv

" Auto read when a file is changed
set autoread
set updatetime=100
augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        "these two _may_ slow things down. Remove if they do.
        "autocmd CursorMoved     * silent! checktime
        "autocmd CursorMovedI    * silent! checktime
    endif
augroup END

" See .vim/after/ftpplugin/python.vim
function GetGooglePythonIndent(lnum)
  " Indent inside parens.
  " Align with the open paren unless it is at the end of the line.
  " E.g.
  "   open_paren_not_at_EOL(100,
  "                         (200,
  "                          300),
  "                         400)
  "   open_paren_at_EOL(
  "       100, 200, 300, 400)
  call cursor(a:lnum, 1)
  let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        \ . " =~ '\\(Comment\\|String\\)$'")
  if par_line > 0
    call cursor(par_line, 1)
    if par_col != col("$") - 1
      return par_col
    endif
  endif
  " Delegate the rest to the original function.
  return GetPythonIndent(a:lnum)
endfunction
